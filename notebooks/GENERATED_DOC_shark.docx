# Technical Documentation

## Overview

## Overview

The codebase for StepUpYourCareer.AI consists of a Python application primarily built using the Streamlit library for creating interactive web applications. The `app.py` file serves as the main entry point for the application. It imports various libraries such as Streamlit, Pandas, PyPDF2, OpenAI, and joblib for different functionalities.

The application allows users to analyze resumes for career advancement by providing their details and proceeding to resume analysis. It includes functions for loading examples from a JSON file, loading role skills from another JSON file, and generating embeddings for text using an OpenAI client.

Key components of the codebase include:
- Setting up the Streamlit page configuration with a specific title and layout.
- Defining functions for different pages of the application, such as collecting user details and loading examples.
- Caching role skills data to improve performance using Streamlit's caching mechanism.
- Generating text embeddings using an OpenAI client for resume analysis.

Overall, the codebase focuses on providing a user-friendly interface for career analysis and skill matching using AI technologies and external data sources.

## Dependencies

Without a requirements.txt file or a list of dependencies provided, it can be challenging to determine the specific dependencies for the project. However, in most software projects, dependencies typically include libraries, frameworks, tools, or other software components that the project relies on to function correctly.

To identify the project's dependencies, you can manually review the project's codebase, configuration files, and any documentation available to identify any external libraries or modules that are imported or referenced. Additionally, you can check for any specific installation instructions or setup steps that may mention required dependencies.

Once you have identified the dependencies, you can create a requirements.txt file or document listing all the dependencies along with their versions to ensure consistent and reproducible installations for the project.

## File Structure

The directory tree structure is as follows:

```
tmp_repo/
|__ ClusteringMentorModelTraining.ipynb
|__ Job_Description_JD_Manupulation.ipynb
|__ Presentation - StepUpYourCareer.ai Elevate Your Future.pdf
|__ README.md
|__ Skill_Gap_Analysis_and_Action_Plan_Generation.ipynb
|__ .devcontainer/
    |__ devcontainer.json
|__ .git/
    |__ config
    |__ description
    |__ HEAD
    |__ index
    |__ packed-refs
    |__ shallow
    |__ hooks/
        |__ applypatch-msg.sample
        |__ commit-msg.sample
        |__ fsmonitor-watchman.sample
        |__ post-update.sample
        |__ pre-applypatch.sample
        |__ pre-commit.sample
        |__ pre-merge-commit.sample
        |__ pre-push.sample
        |__ pre-rebase.sample
        |__ pre-receive.sample
        |__ prepare-commit-msg.sample
        |__ push-to-checkout.sample
        |__ sendemail-validate.sample
        |__ update.sample
    |__ info/
        |__ exclude
    |__ logs/
        |__ HEAD
        |__ refs/
            |__ heads/
                |__ main
            |__ remotes/
                |__ origin/
                    |__ HEAD
    |__ objects/
        |__ info/
        |__ pack/
            |__ pack-77834c024e709f430795a541c7d59da466020bfc.idx
            |__ pack-77834c024e709f430795a541c7d59da466020bfc.pack
            |__ pack-77834c024e709f430795a541c7d59da466020bfc.rev
    |__ refs/
        |__ heads/
            |__ main
        |__ remotes/
            |__ origin/
                |__ HEAD
        |__ tags/
|__ data/
    |__ all_roles_student_resumes.json
    |__ req_job_desc.csv
    |__ role_skills.csv
    |__ role_skills.json
    |__ sim_resume.json
    |__ skill_gap_analysis.csv
    |__ skill_gap_analysis.json
|__ StepUpAI/
    |__ app.py
    |__ generated_mentors.json
    |__ mentors_final_data.json

## Key API Summary

1. `page_1()`: A function that displays a welcome message and prompts the user to input their name and email. If the user provides this information and clicks a button, the function updates the session state with the entered name and email, and advances to the next page.

2. `load_examples()`: A function that loads examples from a JSON file, creates example texts combining resume summaries and target roles, generates embeddings for the example texts using the `get_embedding()` function, and returns the examples and embeddings.

3. `load_role_skills()`: A cached function that loads role skills from a JSON file, processes the data, and returns a dictionary containing technical and soft skills for each role.

4. `get_embedding(text, model="text-embedding-ada-002")`: A function that uses the OpenAI client to generate embeddings for the input text using a specified model.
