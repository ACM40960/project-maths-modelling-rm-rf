[the app.py:188-268] def generate_hybrid_action_plan(tech, soft, trans, skill_resources):
    # Split all three skill types
    tech_in, tech_out = split_skills_by_rag_presence(tech, skill_resources.keys())
    soft_in, soft_out = split_skills_by_rag_presence(soft, skill_resources.keys())
    trans_in, trans_out = split_skills_by_rag_presence(trans, skill_resources.keys())

    #  Construct RAG results
    def extract_rag(skills):
        result = {}
        for s in skills:
            key = s.strip().upper()
            if key in skill_resources:
                    result[s] = skill_resources[key]
        return result

    plan = {
            "message": "Here's a complete roadmap with relevant resources",
            "technical_skill_resources": extract_rag(tech_in),
            "soft_skill_resources": extract_rag(soft_in),
            "transferable_skill_resources": extract_rag(trans_in)
    }

    # P

[the app.py:60-62] def get_embedding(text, model="text-embedding-ada-002"):
    response = client.embeddings.create(input=[text], model=model)
    return response.data[0].embedding

[the app.py:164-171] def extract_json_from_response(raw):
    match = re.search(r"\{[\s\S]*\}", raw)
    if match:
        try:
            return json.loads(match.group())
        except json.JSONDecodeError:
            return {}
    return {}

[the Job_Description_JD_Manupulation.ipynb:cell_6] uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

[the Job_Description_JD_Manupulation.ipynb:cell_3] jobs_desc = pd.read_csv("JobsDatasetProcessed.csv")
req_jobs_desc = jobs_desc.query("Query in ['Artificial Intelligence', 'Business Analyst', 'Business Intelligence Analyst', 'Data Analyst', 'Machine Learning']")
req_jobs_desc = req_jobs_desc[['Query', 'Description']]

[the ClusteringMentorModelTraining.ipynb:cell_3] client = OpenAI(api_key=userdata.get("Open_AI_API_KEY"))

[the ClusteringMentorModelTraining.ipynb:cell_21] mentors_final_data[mentors_final_data["cluster"] == prediction[0]][['name', 'bio','linkedin_id', 'technical_skills']]

[the Skill_Gap_Analysis_and_Action_Plan_Generation.ipynb:cell_5] roles = [
    "Artificial Intelligence",
    "Business Analyst",
    "Business Intelligence Analyst",
    "Data Analyst",
    "Machine Learning"
]

[the Skill_Gap_Analysis_and_Action_Plan_Generation.ipynb:cell_22] from google.colab import files

uploaded = files.upload()
pdf_path = list(uploaded.keys())[0]

target_role = input("Enter your target role (e.g., 'AI Engineer'): ").strip()

output = analyze_uploaded_resume(pdf_path, target_role)

print(json.dumps(output, indent=2))

[the requirements.txt:1-10] streamlit
openai>=1.0.0
PyPDF2
pandas
scikit-learn
tqdm
numpy
pandas
joblib


[the README.md:1-29] # StepUpYourCareer.ai: Elevate Your Future

An AI-powered career assistant that helps students and job seekers identify **skill gaps**, receive **personalized learning roadmaps**, and connect with **industry mentors**—all from a single resume upload.

### Link to the website: https://stepupyourcareer.streamlit.app/

---

## Problem

Graduates often leave university with degrees but **lack clarity on what employers actually expect**. They spend months applying for jobs, facing rejections without knowing **what skills they’re missing** or **how to upskill efficiently**.

---

## Solution

**StepUpYourCareer.ai** transforms your resume into a personalized upskilling journey.

- **Skill Gap Analyzer**: Extracts skills from your resume and compares them to your target role
- **Action Plan Generator**: Recommends curated online courses and resources for each missing skill
- **Mentor Matching**