[Skill_Gap_Analysis_and_Action_Plan_Generation.ipynb:cell_14] ### Extracting common required technical and soft skills required for each role.

[requirements.txt:1-9] streamlit
openai>=1.0.0
PyPDF2
pandas
scikit-learn
tqdm
numpy
pandas
joblib

[ClusteringMentorModelTraining.ipynb:cell_9] ### Fitting a KMean model with range of cluster k and ran for 100 times to be certain.

[Skill_Gap_Analysis_and_Action_Plan_Generation.ipynb:cell_23] ### Action Plan Generation (Testing for 3 Candidates)

[ClusteringMentorModelTraining.ipynb:cell_4] ## Prompt to generate Mentors with skills of experties

[Job_Description_JD_Manupulation.ipynb:cell_4] req_jobs_desc.loc[req_jobs_desc['Query'] == 'Artificial Intelligence', 'Query'] = 'AI Engineer'
req_jobs_desc

[Skill_Gap_Analysis_and_Action_Plan_Generation.ipynb:cell_2] # !pip install PyPDF2 openai
import openai
import json
import time
import re
from openai import OpenAI
from google.colab import userdata
import pandas as pd
pd.set_option('display.max_colwidth', None)
from PyPDF2 import PdfReader
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

[ClusteringMentorModelTraining.ipynb:cell_5] def generate_mentor_prompt(role, tech_skills, n=10):
    prompt = f"""
You are an assistant helping to create a database of expert mentors.

Generate {n} mentor profiles for the role: "{role}".

Each mentor should have:
- A realistic name
- A short professional bio (1–2 sentences)
- A list of 5–7 technical skills (from this list but make sure it the wording are same or atleast close to it, because we will be doing predictions on it later):
  {', '.join(tech_skills)}

Return the output in this JSON format:
[
  {{
    "name": "Mentor Name",
    "bio": "Short mentor bio.",
    "linkedin_id": "Mentor LinkedIn ID",
    "technical_skills": ["skill1", "skill2", ...]
  }},
  ...
]
"""
    return prompt

# Load role + skill data
with open("/content/sample_data/role_skills.json") as f:
    roles_data = json.load(f)

# Collection
all_mentors = []
mentor_counter = 1

# Generate mentors for each role
for role_info in roles_data:
    role = role_info["role"]
    tech_skills = role_info["technical_skills"]

    prompt = generate_mentor_prompt(role, tech_skills, n=25)

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "use

[app.py:24-35] def page_1():
    st.title("Welcome to StepUpYourCareer.AI")
    st.markdown("##### Let's get started with a few details.")

    name = st.text_input("Your Full Name")
    email = st.text_input("Your Email Address")

    if name and email:
        if st.button("➡️ Proceed to Resume Analysis"):
            st.session_state.name = name
            st.session_state.email = email
            st.session_state.page = 2

[Skill_Gap_Analysis_and_Action_Plan_Generation.ipynb:cell_9] with open("all_roles_student_resumes.json", "r") as f:
    resumes = json.load(f)

jobs_df = pd.read_csv("req_job_desc.csv")